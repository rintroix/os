# This workflow builds every branch of the repository daily at 16:30 UTC, one hour after ublue-os/nvidia builds.
# The images are also built after pushing changes or pull requests.
# The builds can also be triggered manually in the Actions tab thanks to workflow dispatch.
# Only the branch called `live` is published.


name: build-ublue
on: # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows
  schedule:
    - cron: "30 16 * * *"
  push:
    branches:
      - live
      - template
      - main
    paths-ignore: # don't rebuild if only documentation has changed
      - "**.md"
  pull_request:
  workflow_dispatch:

# Only deploys the branch named "live". Ignores all other branches, to allow
# having "development" branches without interfering with GHCR image uploads.
jobs:
  push-ghcr:
    name: Build and push image
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: true
      max-parallel: 1
      matrix:
# !!!
        # Add recipes for all the images you want to build here.
        # Don't add module configuration files, you will get errors.
        recipe:
          - 01-os-apps.yml
          - 02-os-kernel.yml
          - 03-os.yml
# !!!

    steps:
      - name: Maximize build space
        uses: AdityaGarg8/remove-unwanted-software@v1
        with:
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'

      # Checkout push-to-registry action GitHub repository
      - name: Checkout Push to Registry action
        uses: actions/checkout@v4

      - name: Add yq (for reading recipe.yml)
        id: config
        uses: mikefarah/yq@v4.40.5
        with:
          cmd: yq '.|("IMAGE_NAME=" + .name , "IMAGE_DESCRIPTION=" + "\"" + .description + "\"")' ./config/${{ matrix.recipe }} >> $GITHUB_ENV
          # cmd: yq '. | {"name": .name, "description": .description, "base-image": ."base-image", "base-tag": ."image-version"}' ./config/${{ matrix.recipe }}

      - name: Gather image data from recipe
        run: |
          # echo "IMAGE_NAME=$(yq '.name' ./config/${{ matrix.recipe }})" >> $GITHUB_ENV
          # echo "IMAGE_DESCRIPTION=$(yq '.description' ./config/${{ matrix.recipe }})" >> $GITHUB_ENV
          echo "IMAGE_MAJOR_VERSION=$(yq '.image-version' ./config/${{ matrix.recipe }})" >> $GITHUB_ENV
          echo "BASE_IMAGE_URL=$(yq '.base-image' ./config/${{ matrix.recipe }})" >> $GITHUB_ENV

      - name: Get current version
        id: labels
        run: |
          ver=$(skopeo inspect docker://${{ env.BASE_IMAGE_URL }}:${{ env.IMAGE_MAJOR_VERSION }} | jq -r '.Labels["org.opencontainers.image.version"]')
          echo "VERSION=$ver" >> $GITHUB_OUTPUT

      - name: Generate tags
        id: generate-tags
        shell: bash
        run: |
          # Generate a timestamp for creating an image version history
          TIMESTAMP="$(date +%Y%m%d)"
          MAJOR_VERSION="$(echo ${{ steps.labels.outputs.VERSION }} | cut -d . -f 1)"
          COMMIT_TAGS=()
          BUILD_TAGS=()
          # Have tags for tracking builds during pull request
          SHA_SHORT="${GITHUB_SHA::7}"

          # Using clever bash string templating, https://stackoverflow.com/q/40771781
          # don't make malformed tags if $MAJOR_VERSION is empty (base-image didn't include proper labels) --
          COMMIT_TAGS+=("pr-${{ github.event.number }}${MAJOR_VERSION:+-$MAJOR_VERSION}")
          COMMIT_TAGS+=("${SHA_SHORT}${MAJOR_VERSION:+-$MAJOR_VERSION}")

          BUILD_TAGS=("${MAJOR_VERSION}" "${MAJOR_VERSION:+$MAJOR_VERSION-}${TIMESTAMP}")
          # --

          BUILD_TAGS+=("${TIMESTAMP}")
          BUILD_TAGS+=("latest")

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "Generated the following commit tags: "
              for TAG in "${COMMIT_TAGS[@]}"; do
                  echo "${TAG}"
              done
              alias_tags=("${COMMIT_TAGS[@]}")
          else
              alias_tags=("${BUILD_TAGS[@]}")
          fi
          echo "Generated the following build tags: "
          for TAG in "${BUILD_TAGS[@]}"; do
              echo "${TAG}"
          done
          echo "alias_tags=${alias_tags[*]}" >> $GITHUB_OUTPUT

      # Build metadata
      - name: Image Metadata
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: |
            ${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.version=${{ steps.labels.outputs.VERSION }}
            org.opencontainers.image.description=${{ env.IMAGE_DESCRIPTION }}
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/ublue-os/startingpoint/main/README.md
            io.artifacthub.package.logo-url=https://avatars.githubusercontent.com/u/120078124?s=200&v=4

      # # Workaround bug where capital letters in your GitHub username make it impossible to push to GHCR.
      # # https://github.com/macbre/push-to-ghcr/issues/12
      # - name: Lowercase Registry
      #   id: registry_case
      #   uses: ASzc/change-string-case-action@v6
      #   with:
      #     string: ${{ matrix.registry.name }}/${{ github.repository_owner }}

      # - name: Lowercase Image
      #   id: image_case
      #   uses: ASzc/change-string-case-action@v6
      #   with:
      #     string: ${{ env.IMAGE_NAME }}


      # Build image using Buildah action
      - name: Build Image
        id: build_image
        uses: redhat-actions/buildah-build@v2
        with:
          containerfiles: |
            ./Containerfile
          image: ${{ steps.config.outputs.result.name }}
          tags: |
            ${{ steps.generate-tags.outputs.alias_tags }}
          build-args: |
            IMAGE_MAJOR_VERSION=${{ env.IMAGE_MAJOR_VERSION }}
            BASE_IMAGE_URL=${{ env.BASE_IMAGE_URL }}
            RECIPE=${{ matrix.recipe }}
            IMAGE_REGISTRY=delme
          labels: ${{ steps.meta.outputs.labels }}
          oci: false

      - name: Push To Registry
        uses: redhat-actions/push-to-registry@v2
        id: ghcr
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/live'
        with:
          image: ${{ steps.build_image.outputs.image }}
          tags: ${{ steps.build_image.outputs.tags }}
          registry: ghcr.io/${{ github.repository_owner }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
          # extra-args: |
          #   --disable-content-trust

      - name: Push To Registry
        uses: redhat-actions/push-to-registry@v2
        id: quay
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/live'
        with:
          image: ${{ steps.build_image.outputs.image }}
          tags: ${{ steps.build_image.outputs.tags }}
          registry: quay.io/${{ github.repository_owner }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.QUAY_PASSWORD }}
          # extra-args: |
          #   --disable-content-trust

      - name: Push To Registry
        uses: redhat-actions/push-to-registry@v2
        id: docker
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/live'
        with:
          image: ${{ steps.build_image.outputs.image }}
          tags: ${{ steps.build_image.outputs.tags }}
          registry: docker.io/${{ github.repository_owner }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          # extra-args: |
          #   --disable-content-trust

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/live'
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/live'
        with:
          registry: quay.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.QUAY_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/live'
        with:
          registry: docker.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.DOCKER_PASSWORD }}
  
      # Sign container
      - uses: sigstore/cosign-installer@v3.3.0
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/live'

      - name: Sign container image
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/live'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}@${TAGS}
        env:
          TAGS: ${{ steps.ghcr.outputs.digest }}
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}

      - name: Sign container image
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/live'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY quay.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}@${TAGS}
        env:
          TAGS: ${{ steps.quay.outputs.digest }}
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}

      - name: Sign container image
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/live'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY docker.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}@${TAGS}
        env:
          TAGS: ${{ steps.docker.outputs.digest }}
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}

      - name: Echo outputs
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/live'
        run: |
          echo "${{ toJSON(steps.ghcr.outputs) }}"
